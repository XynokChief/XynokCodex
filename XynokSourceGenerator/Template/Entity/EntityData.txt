{Scope}
using System;
using UnityEngine;
using System.Linq;
using XynokConvention.Data.Binding;
using XynokSourceGenerator.Entities.APIs;


namespace XynokSourceGenerator.Entities.Data
{

        [Serializable]
        public class {EntityName}Stat: APairData<{StatName}, float>{}
        
        [Serializable]
        public class {EntityName}State: APairData<{StateName}, bool>{}
        
        [Serializable]
        public class {EntityName}Trigger: ATriggerData<{TriggerName}>{}
        
        [Serializable]
        public class {EntityName}CurrentState: APrimitiveData<{EntityName}StateFlag>{}
        

        /// <summary>
        /// {EntityName}Resource is a serializable class that contains all the data of {EntityName}.
        /// <b>Important Note:</b> Use for Runtime only.
        /// </summary>
        [Serializable]
        public class {EntityName}Resource
        {
            public {EntityEnumName} ResourceId;
            public {EntityName}Stat[] Stats;
            public {EntityName}State[] States;
            public {EntityName}Trigger[] Triggers;
            [SerializeReference] public I{EntityName}Ability[] Abilities = Array.Empty<I{EntityName}Ability>();
            
            
            public {EntityName}Stat GetStat({StatName} statType) => Stats.FirstOrDefault(s => s.Key == statType);
            public {EntityName}State GetState({StateName} stateType) => States.FirstOrDefault(s => s.Key == stateType);
            public {EntityName}Trigger GetTrigger({TriggerName} triggerType) => Triggers.FirstOrDefault(s => s.Key == triggerType);
            
            public T GetAbility<T>() where T: I{EntityName}Ability
            {
                foreach (var ability in Abilities)
                {
                    if(ability is T t) return t;
                }
                Debug.LogError($"[{nameof({EntityName}Resource)}]: Ability {typeof(T).Name} not found");
                return default;
            }
        }
}

{Body}