{Scope}
using System;
using UnityEngine;
using System.Linq;
using XynokConvention.APIs;
using XynokConvention.Data.Binding;

namespace XynokSourceGenerator.Entities
{

#region Interface
        public interface I{EntityName}: IInjectable<{EntityName}Resource>
        {
            {EntityName}Resource Resource { get; }
        }
        
        public interface I{EntityName}Ability: IInjectable<I{EntityName}>
        {
        }
#endregion

#region Data


        [Serializable]
        public class {EntityName}Stat: APairData<{StatName}, float>{}
        
        [Serializable]
        public class {EntityName}State: APairData<{StateName}, bool>{}
        
        [Serializable]
        public class {EntityName}Trigger: ATriggerData<{TriggerName}>{}
        

        /// <summary>
        /// {EntityName}Resource is a serializable class that contains all the data of {EntityName}.
        /// <b>Important Note:</b> Use for Runtime only.
        /// </summary>
        [Serializable]
        public class {EntityName}Resource
        {
            public {EntityEnumName} ResourceId;
            public {EntityName}Stat[] Stats;
            public {EntityName}State[] States;
            public {EntityName}Trigger[] Triggers;
            [SerializeReference] public I{EntityName}Ability[] Abilities = Array.Empty<I{EntityName}Ability>();
            
            
            public {EntityName}Stat GetStat({StatName} statType) => Stats.FirstOrDefault(s => s.Key == statType);
            public {EntityName}State GetState({StateName} stateType) => States.FirstOrDefault(s => s.Key == stateType);
            public {EntityName}Trigger GetTrigger({TriggerName} triggerType) => Triggers.FirstOrDefault(s => s.Key == triggerType);
            
            public T GetAbility<T>() where T: I{EntityName}Ability
            {
                foreach (var ability in Abilities)
                {
                    if(ability is T t) return t;
                }
                Debug.LogError($"[{nameof({EntityName}Resource)}]: Ability {typeof(T).Name} not found");
                return default;
            }
        }
        

        
#endregion


#region {EntityName} class base

    /// <summary>
    /// {EntityName} Gameobject
    /// </summary>
    public abstract class A{EntityName}: MonoBehaviour, I{EntityName}
    {
        [SerializeField] private {EntityName}Resource resource;
        public {EntityName}Resource Resource => resource;
        private Action _disposeAbilities;
        
        public void SetDependency({EntityName}Resource dependency)
        {
            Dispose();
            if(dependency == null)
            {
             Debug.LogError($"[{name} - {GetType().Name}]: dependency is null");
             return;
            }
            resource = dependency;
            Init();
        }
        
        protected virtual void Init()
        {
            InitAbilities();
        }
        
        public virtual void Dispose()
        {
           _disposeAbilities?.Invoke();
           _disposeAbilities = default;
        }
        
        void InitAbilities()
        {
            foreach (var ability in resource.Abilities)
            { 
                if(ability == null) continue;
                ability.SetDependency(this);
                _disposeAbilities += ability.Dispose;
            }
        }
    }
#endregion
}

{Body}