{Scope}
using System;
using Sirenix.OdinInspector;
using UnityEngine;
using XynokConvention;
using XynokConvention.Procedural;
using XynokConvention.Enums;
using XynokEntity.Enums;
using XynokConvention.APIs;
using XynokSourceGenerator.Entities.APIs;
using XynokSourceGenerator.Entities.Data;


namespace XynokSourceGenerator.Entities
{
    /// <summary>
    /// {EntityName} base class ability
    /// </summary>
    [Serializable]
    public abstract class A{EntityName}Ability: I{EntityName}Ability
    {
        protected I{EntityName} owner;
        [FoldoutGroup(ConventionKey.Settings)] [Space(10)] [SerializeField] protected AbilityExecuteValidatorType executeValidator = AbilityExecuteValidatorType.WhenStateOwnerChanged;
        [FoldoutGroup(ConventionKey.Settings)] [Space(10)] [SerializeReference] protected I{EntityName}CurrentStateValidator[] validators = Array.Empty<I{EntityName}CurrentStateValidator>();
        private bool _canExecute;
        private Action _onDispose;
    
        public void SetDependency(I{EntityName} dependency)
        {
            Dispose();
            if(dependency == null)
            {
             Debug.LogError($"[{GetType().Name}]: dependency is null");
             return;
            }
            owner = dependency;
            InitVaidators();
            OnStateOwnerChanged(owner.CurrentState.Value);
            owner.CurrentState.OnChanged += OnStateOwnerChanged;
            Init();
            TimeCycle.Instance.AddInvoker(Execute);
        }
        
        public void Dispose()
        {
            if(owner != null) owner.CurrentState.OnChanged -= OnStateOwnerChanged;
            TimeCycle.Instance.RemoveInvoker(Execute);
            _onDispose?.Invoke();
            _onDispose = default;
            OnDispose();
        }
        
        public void Execute()
        {
            if(!IsValidated()) return;
            OnExecute();
        }
        
        void InitVaidators()
        {
            if(validators == null || validators.Length < 1) return;
            foreach (var validator in validators)
            {
                if(validator == null) continue;
                validator.SetDependency(owner);
                _onDispose += validator.Dispose;
            }
        }

        void OnStateOwnerChanged({EntityName}StateFlag state)
        {
            _canExecute = IsValidatorsValidated();
        }
        
        bool IsValidated()
        {
            if(executeValidator == AbilityExecuteValidatorType.WhenStateOwnerChanged) return _canExecute;
            if(executeValidator == AbilityExecuteValidatorType.Always) return IsValidatorsValidated();
            return true;
        }

        bool IsValidatorsValidated()
        {
            if(validators == null || validators.Length < 1) return true;
            bool isValidated = true;
            
            foreach (var validator in validators)
            {
                if(validator == null) continue;
                if(!validator.IsValid()) isValidated = false;
            }
            return isValidated;
        }
        
        protected abstract void Init();
        protected abstract void OnExecute();
        protected abstract void OnDispose();
        public abstract void Reset();
      
    }

}

{Body}