{Scope}
using System;
using UnityEngine;
using Sirenix.OdinInspector;
using XynokEntity.Enums;
using XynokConvention.Enums;
using  XynokSourceGenerator.Entities.APIs;

namespace XynokSourceGenerator.Entities.Data
{



    [Serializable]
    public class {EntityName}DataRelationshipContainer: I{EntityName}Ability
    {
        protected I{EntityName} owner;

        private {EntityName}Stat[] Stats => owner.Resource.Stats;
        private {EntityName}State[] States => owner.Resource.States;
        private {EntityName}Trigger[] Triggers => owner.Resource.Triggers;

        private Action _onDispose;

        public void SetDependency(I{EntityName} dependency)
        {
            Dispose();
            if(dependency == null)
            {
             Debug.LogError($"[{GetType().Name}]: dependency is null");
             return;
            }
            owner = dependency;
            Execute();
        }
        
        public void Dispose()
        {
            _onDispose?.Invoke();
            _onDispose = default;
        }
        
        public void Execute()
        {
            if(_onDispose != default) Dispose();
            Init();
        }

        public void Reset()
        {
            Dispose();
        }
        
        void Init()
        {
       
        }
    }
        

}

