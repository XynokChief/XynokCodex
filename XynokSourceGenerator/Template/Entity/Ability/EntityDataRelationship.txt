{Scope}
using System;
using UnityEngine;
using Sirenix.OdinInspector;
using XynokEntity.Enums;
using XynokEntity.APIs;
using XynokConvention.Enums;
using XynokConvention.APIs;
using XynokSourceGenerator.Entities.APIs;
using XynokConvention.Procedural;

namespace XynokSourceGenerator.Entities.Data
{

    [Serializable]
    public class {EntityName}DataRelationship: IExecute, IInjectable<I{EntityName}>
    {
        [SerializeField] [HideLabel] private {EntityName}DataSetter setter;
        [SerializeField] [HideLabel] private {EntityName}DataValidatorContainer validator;
        
        private I{EntityName} _owner;
        private Action _onDispose;
        public void SetDependency(I{EntityName} dependency)
        {
            Dispose();
            if(dependency == null)
            {
             Debug.LogError($"[{GetType().Name}]: dependency is null");
             return;
            }
            _owner = dependency;
            Init();

        }
        
        public void Dispose()
        {
            _onDispose?.Invoke();
            _onDispose = default;
        }
        
        public void Execute()
        {
            if(validator.IsValid()) setter.Execute();
        }
        
        void Init()
        {
            setter.SetDependency(_owner);
            _onDispose+= setter.Dispose;

            validator.SetDependency(_owner);
            _onDispose+= validator.Dispose;
        }
    }


    [Serializable]
    public class {EntityName}DataRelationshipContainer: I{EntityName}Ability
    {
        private I{EntityName} _owner;
        
        [SerializeField] private UpdateMode trackMode;
        [SerializeField] private AbilityExecuteValidatorType executeValidator = AbilityExecuteValidatorType.Always;
        [SerializeField] [HideLabel] [TableList] private {EntityName}DataRelationship[] relationships;


        private Action _onDispose;
        private bool _canExecute;

        public void SetDependency(I{EntityName} dependency)
        {
            Dispose();
            if(dependency == null)
            {
             Debug.LogError($"[{GetType().Name}]: dependency is null");
             return;
            }
            _owner = dependency;
            Init();
            OnStateOwnerChanged(_owner.CurrentState.Value);
            _owner.CurrentState.OnChanged += OnStateOwnerChanged;
            TimeCycle.Instance.AddInvoker(Execute, trackMode);
        }
        
        public void Dispose()
        {
            TimeCycle.Instance.RemoveInvoker(Execute, trackMode);
            if(_owner != null) _owner.CurrentState.OnChanged -= OnStateOwnerChanged;
            _onDispose?.Invoke();
            _onDispose = default;
            _canExecute = default;
        }
        
        public void Execute()
        {
            if(executeValidator == AbilityExecuteValidatorType.WhenOwnerStateChanged)
            {
                if(!_canExecute) return;
                _canExecute = false;
            }
            
            foreach (var relationship in relationships)
            {
                relationship?.Execute();
            }
        }

        public void Reset()
        {
            Dispose();
        }

        void OnStateOwnerChanged({EntityName}StateFlag state)
        {
            _canExecute = true;
        }
        
        void Init()
        {
            foreach (var relationship in relationships)
            {
                relationship.SetDependency(_owner);
                _onDispose+= relationship.Dispose;
            }
        }
    }
        

}

