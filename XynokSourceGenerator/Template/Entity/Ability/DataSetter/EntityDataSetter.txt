{Scope}
using System;
using UnityEngine;
using XynokEntity.Enums;
using XynokConvention.APIs;
using XynokSourceGenerator.Entities.APIs;
using Sirenix.OdinInspector;

namespace XynokSourceGenerator.Entities.Data
{

    /// <summary>
    /// Thay đổi dữ liệu của {EntityName} khi gọi hàm Execute
    /// </summary>
    [Serializable]
    public class {EntityName}DataSetter: IExecute, IInjectable<I{EntityName}>
    {
        private I{EntityName} _owner;
        
        [HorizontalGroup] [SerializeField] [HideLabel] private EntityDataType dataType;
        
        [HorizontalGroup] [ShowIf(nameof(dataType),EntityDataType.SelfStat)] [HideLabel] [SerializeField] private {StatName} stat;
        [HorizontalGroup] [ShowIf(nameof(dataType),EntityDataType.SelfStat)] [HideLabel] [SerializeField] private float statValue;
        
        [HorizontalGroup] [ShowIf(nameof(dataType),EntityDataType.SelfState)] [HideLabel] [SerializeField] private {StateName} state;
        [HorizontalGroup] [ShowIf(nameof(dataType),EntityDataType.SelfState)] [HideLabel] [SerializeField] private bool stateValue;
        
        [HorizontalGroup] [ShowIf(nameof(dataType),EntityDataType.SelfTrigger)] [HideLabel] [SerializeField] private {TriggerName} trigger;
        
        
        private {EntityName}Stat _stat;
        private {EntityName}State _state;
        private {EntityName}Trigger _trigger;
        
        public void SetDependency(I{EntityName} dependency)
        {
           Dispose();
           if(dependency == null)
           {
                Debug.LogError($"{GetType().Name} Dependency is null");
                return;
           }
           _owner = dependency;
        }
        
        public void Dispose()
        {
            
        }
        
        public void Execute()
        {
            if(_owner == null)
            {
                Debug.LogError($"{GetType().Name} Dependency is null");
                return;
            }
        
            switch (dataType)
            {
                case EntityDataType.SelfStat:
                   _stat ??= _owner.Resource.GetStat(stat);
                   if(_stat == null)
                   {
                       Debug.LogError($"{GetType().Name} Stat {stat} is null");
                       return;
                   }
                   _stat.Value = statValue;
                    break;
                case EntityDataType.SelfState:
                    _state ??= _owner.Resource.GetState(state);
                    if(_state == null)
                    {
                        Debug.LogError($"{GetType().Name} State {state} is null");
                        return;
                    }
                    _state.Value = stateValue;
                    break;
                case EntityDataType.SelfTrigger:
                    _trigger ??= _owner.Resource.GetTrigger(trigger);
                    if(_trigger == null)
                    {
                        Debug.LogError($"{GetType().Name} Trigger {trigger} is null");
                        return;
                    }
                    _trigger.SetTrigger();
                    break;
                default:
                    throw new ($"{GetType().Name} DataType {dataType} is not supported !");
            }
        }
    }
    
   
        


}

{Body}