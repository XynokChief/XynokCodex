{Scope}
using System;
using UnityEngine;
using Sirenix.OdinInspector;
using XynokConvention.APIs;
using XynokEntity.Enums;
using XynokSourceGenerator.Entities.APIs;
using XynokSourceGenerator.Entities.Data;

namespace XynokSourceGenerator.Entities
{

    [Serializable]
    public class {EntityName}StateValidator: I{EntityName}CurrentStateValidator
    {
        [SerializeField] private ValidatorEntityStateType validator;
        [ShowIf(nameof(validator),ValidatorEntityStateType.OnlyOne)] [SerializeField] private {EntityName}StateFlag condition;
        [ShowIf(nameof(validator),ValidatorEntityStateType.OneOf)] [SerializeField] private {EntityName}StateFlag[] conditions;
        
        protected I{EntityName} owner;
        
        public void SetDependency(I{EntityName} dependency)
        {
            owner = dependency;
        }
        
        public void Dispose()
        {
        }
        
        public bool IsValid()
        {
            if(owner == null)
            {
                Debug.LogError($"{GetType().Name}: Owner is null");
                return false;
            }
            
            switch (validator)
            {
                case ValidatorEntityStateType.OnlyOne:
                    return SingleConditionValid();
                case ValidatorEntityStateType.OneOf:
                    return MultipleConditionsValid();
                default:
                    throw new ($"{GetType().Name} has no implementation for {validator} validator type");
            }
        }
        
        bool SingleConditionValid()
        {
            return owner.CurrentState.Has(condition);
        }
        
        bool MultipleConditionsValid()
        {
            foreach (var condition in conditions)
            {
                if (owner.CurrentState.Has(condition)) return true;
            }
            return false;
        }
    }
        
        {Body}

}

