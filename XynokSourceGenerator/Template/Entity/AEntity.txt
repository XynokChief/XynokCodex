{Scope}
using System;
using UnityEngine;
using System.Linq;
using XynokSourceGenerator.Entities.Data;
using XynokSourceGenerator.Entities.APIs;

/*
------------------------------------ KEYWORDS ------------------------------------
EntityName: {EntityName}
EntityEnumName: {EntityEnumName}
StatName: {StatName}
StateName: {StateName}
TriggerName: {TriggerName}
*/

namespace XynokSourceGenerator.Entities
{


    /// <summary>
    /// {EntityName} Gameobject
    /// </summary>
    public abstract class A{EntityName}Mono: MonoBehaviour, I{EntityName}
    {
        [SerializeField] private {EntityName}Resource resource;
        public {EntityName}Resource Resource => resource;
        private Action _disposeAbilities;
        
        public void SetDependency({EntityName}Resource dependency)
        {
            Dispose();
            if(dependency == null)
            {
             Debug.LogError($"[{name} - {GetType().Name}]: dependency is null");
             return;
            }
            resource = dependency;
            Init();
        }
        
        protected virtual void Init()
        {
            InitAbilities();
        }
        
        public virtual void Dispose()
        {
           _disposeAbilities?.Invoke();
           _disposeAbilities = default;
        }
        
        void InitAbilities()
        {
            foreach (var ability in resource.Abilities)
            { 
                if(ability == null) continue;
                ability.SetDependency(this);
                _disposeAbilities += ability.Dispose;
            }
        }
    }



    /// <summary>
    /// {EntityName} pure class can serialize and deserialize data
    /// </summary>
    [Serializable]
    public abstract class A{EntityName}: I{EntityName}
    {
        [SerializeField] private {EntityName}Resource resource;
        public {EntityName}Resource Resource => resource;
        private Action _disposeAbilities;
        
        public void SetDependency({EntityName}Resource dependency)
        {
            Dispose();
            if(dependency == null)
            {
             Debug.LogError($"[{resource.ResourceId} - {GetType().Name}]: dependency is null");
             return;
            }
            resource = dependency;
            Init();
        }
        
        protected virtual void Init()
        {
            InitAbilities();
        }
        
        public virtual void Dispose()
        {
           _disposeAbilities?.Invoke();
           _disposeAbilities = default;
        }
        
        void InitAbilities()
        {
            foreach (var ability in resource.Abilities)
            { 
                if(ability == null) continue;
                ability.SetDependency(this);
                _disposeAbilities += ability.Dispose;
            }
        }
    }

}

{Body}