{Scope}
using System;
using UnityEngine;
using XynokSourceGenerator.Entities.Data;
using XynokSourceGenerator.Entities.APIs;

/*
------------------------------------ KEYWORDS ------------------------------------
EntityName: {EntityName}
EntityEnumName: {EntityEnumName}
StatName: {StatName}
StateName: {StateName}
TriggerName: {TriggerName}
*/

namespace XynokSourceGenerator.Entities
{


    /// <summary>
    /// {EntityName} Gameobject
    /// </summary>
    public abstract class A{EntityName}Mono: MonoBehaviour, I{EntityName}
    {
        [SerializeField] private {EntityName}CurrentState currentState;
        [SerializeField] private {EntityName}Resource resource;
        {HasItem} [SerializeReference] private I{EntityName}Item[] items;
        
        public {EntityName}CurrentState CurrentState => currentState;
        public {EntityName}Resource Resource => resource;
        {HasItem} public I{EntityName}Item[] Items {get => items; set => items = value;}
        
        private Action _onDispose{EntityName};
        
        public void SetDependency({EntityName}Resource dependency)
        {
            Dispose();
            if(dependency == null)
            {
             Debug.LogError($"[{name} - {GetType().Name}]: dependency is null");
             return;
            }
            resource = dependency;
            Init();
        }

        
        protected virtual void Init()
        {
            InitAbilities();
            {HasItem} InitItems();
        }
        
        public virtual void Dispose()
        {
           _onDispose{EntityName}?.Invoke();
           _onDispose{EntityName} = default;
        }
        
        protected void InitAbilities()
        {
            foreach (var ability in resource.Abilities)
            { 
                if(ability == null) continue;
                ability.SetDependency(this);
                _onDispose{EntityName} += ability.Dispose;
            }
        }

        {HasItem}protected void InitItems()
        {HasItem}{
        {HasItem}    if(Items == null || Items.Length < 1) return;
        {HasItem}    
        {HasItem}    foreach (var item in Items)
        {HasItem}    { 
        {HasItem}        if(item == null) continue;
        {HasItem}        
        {HasItem}        
        {HasItem}        OnBeUsingChanged(item.BeUsing.Value);
        {HasItem}        
        {HasItem}        item.BeUsing.OnChanged += OnBeUsingChanged;
        {HasItem}        
        {HasItem}        void OnBeUsingChanged(bool value)
        {HasItem}        {
        {HasItem}            if(value)
        {HasItem}            {
        {HasItem}                item.SetDependency(this);
        {HasItem}                _onDispose{EntityName} += item.Dispose;
        {HasItem}                return;
        {HasItem}            }
        {HasItem}            _onDispose{EntityName} -= item.Dispose;
        {HasItem}            item.Dispose();
        {HasItem}        };
        {HasItem}        _onDispose{EntityName} += () => item.BeUsing.OnChanged -= OnBeUsingChanged;                
        {HasItem}    }
        {HasItem}}
    }



    /// <summary>
    /// {EntityName} pure class
    /// </summary>
    [Serializable]
    public abstract class A{EntityName}: I{EntityName}
    {
        [SerializeField] private {EntityName}CurrentState currentState;
        [SerializeField] private {EntityName}Resource resource;
        {HasItem} [SerializeReference] private I{EntityName}Item[] items;
        
        public {EntityName}CurrentState CurrentState => currentState;
        public {EntityName}Resource Resource => resource;
        {HasItem} public I{EntityName}Item[] Items {get => items; set => items = value;}
        
        private Action _onDispose{EntityName};
        
        public void SetDependency({EntityName}Resource dependency)
        {
            Dispose();
            if(dependency == null)
            {
             Debug.LogError($"[{resource.ResourceId} - {GetType().Name}]: dependency is null");
             return;
            }
            resource = dependency;
            Init();
        }
        
        protected virtual void Init()
        {
            InitAbilities();
            {HasItem} InitItems();
        }
        
        public virtual void Dispose()
        {
           _onDispose{EntityName}?.Invoke();
           _onDispose{EntityName} = default;
        }
        
        void InitAbilities()
        {
            foreach (var ability in resource.Abilities)
            { 
                if(ability == null) continue;
                ability.SetDependency(this);
                _onDispose{EntityName} += ability.Dispose;
            }
        }

        {HasItem} protected void InitItems()
        {HasItem} {
        {HasItem}     if(Items == null || Items.Length < 1) return;
        {HasItem}     
        {HasItem}     foreach (var item in Items)
        {HasItem}     { 
        {HasItem}         if(item == null) continue;
        {HasItem}         
        {HasItem}         
        {HasItem}         OnBeUsingChanged(item.BeUsing.Value);
        {HasItem}         
        {HasItem}         item.BeUsing.OnChanged += OnBeUsingChanged;
        {HasItem}         
        {HasItem}         void OnBeUsingChanged(bool value)
        {HasItem}         {
        {HasItem}             if(value)
        {HasItem}             {
        {HasItem}                 item.SetDependency(this);
        {HasItem}                 _onDispose{EntityName} += item.Dispose;
        {HasItem}                 return;
        {HasItem}             }
        {HasItem}             _onDispose{EntityName} -= item.Dispose;
        {HasItem}             item.Dispose();
        {HasItem}         };
        {HasItem}         _onDispose{EntityName} += () => item.BeUsing.OnChanged -= OnBeUsingChanged;
        {HasItem}     }
        {HasItem} }      
    }

}

{Body}