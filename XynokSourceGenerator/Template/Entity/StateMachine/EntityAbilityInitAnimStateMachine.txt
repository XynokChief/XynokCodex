{Scope}
using System;
using System.Linq;
using UnityEngine;
using XynokConvention.APIs;
using XynokSourceGenerator.Entities.APIs;
using Sirenix.OdinInspector;
namespace XynokSourceGenerator.Entities.StateMachine
{
    
    /// <summary>
    /// init the state machine of the animator bind them to the {EntityName} entity
    /// </summary>
    [Serializable]
    [TypeInfoBox("{EntityName}-AbilityInitAnimStateMachine: init frames data and state machine behavior")]
    public class {EntityName}AbilityInitAnimStateMachine: I{EntityName}Ability
    {
        private I{EntityName} _owner;
        public I{EntityName} Owner => _owner;
        
        [SerializeField] private Animator animator;
        [SerializeField] private {EntityName}AnimatorFrameDataContainer frameDataContainer;

        private IInjectable<I{EntityName}>[] _injectableStateMachines;
        private Action _onDispose;
        
        public void SetDependency(I{EntityName} dependency)
        {
            Dispose();
            if(dependency == null)
            {
                Debug.LogError($"[{GetType().Name}]: dependency is null");
                return;
            }
            _owner = dependency;
            Execute();
        }
        
        void Init()
        {
            InitFrameData();
            InitAnimStateBehavior();
            InitAnimStateBehaviorExitCatcher();
        }
        
        void InitFrameData()
        {
            if(!frameDataContainer) return;
            frameDataContainer.SetDependency(_owner);
            _onDispose += frameDataContainer.Dispose;
        }
        
        void InitAnimStateBehavior()
        {
            _injectableStateMachines = animator.GetBehaviours<StateMachineBehaviour>().OfType<IInjectable<I{EntityName}>>().ToArray();
            
            if(_injectableStateMachines == null || _injectableStateMachines.Length < 1) return;
            
            foreach (var injectable in _injectableStateMachines)
            {
                injectable.SetDependency(_owner);
                _onDispose += injectable.Dispose;
            }
        }
        
        
        void InitAnimStateBehaviorExitCatcher()
        {
           var stateMachines = animator.GetBehaviours<{EntityName}AnimatorStateMachine>();
            
            if(stateMachines == null || stateMachines.Length < 1) return;
            
            foreach (var injectable in stateMachines)
            {
                injectable.frameDataContainer = frameDataContainer;
            }
        }
        
        public void Execute()
        {
            Reset();
            Init();
        }
        
        public void Reset()
        {
            if(_onDispose != default) Dispose();
        }
        
        public void Dispose()
        {
            _onDispose?.Invoke();
            _onDispose = default;
        }
        
    }
    {Body}
}

