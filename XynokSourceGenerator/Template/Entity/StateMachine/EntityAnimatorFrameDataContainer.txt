{Scope}
using System;
using XynokEntity.AnimPhasing;
using XynokEntity.AnimPhasing.Data;
using XynokSourceGenerator.Entities.APIs;
using Sirenix.OdinInspector;
using XynokConvention;

namespace XynokSourceGenerator.Entities.StateMachine
{
    [Serializable]
    public class {EntityName}AnimClipData: EntityAnimClipData<I{EntityName}>
    {
    }
    
    [Serializable]
    public class {EntityName}EntityFrameRangeData: EntityFrameRangeData<I{EntityName}>
    {
    }

    public class {EntityName}AnimatorFrameDataContainer: EntityAnimatorFrameDataContainer<I{EntityName}>
    {


        [FoldoutGroup(ConventionKey.Settings)]
        [Button(ButtonSizes.Medium), GUIColor(Colors.Purple)]
        void InitAnimatorStateMachine()
        {
#if UNITY_EDITOR
            var controller = animator.runtimeAnimatorController as UnityEditor.Animations.AnimatorController;
            var behaviors = controller.GetBehaviours<{EntityName}AnimatorStateMachine>();
            foreach (var behavior in behaviors)
            {
                DestroyImmediate(behavior, true);
            }
            var baker = new XynokEntity.AnimPhasing.Editor.AnimatorStateMachineBaker(animator);
            var layers = baker.GetLayers();
            
            for(int i = 0; i < layers.Length; i++)
            {
                var result = controller.layers[i].stateMachine.AddStateMachineBehaviour<{EntityName}AnimatorStateMachine>();
                result.layerData = layers[i];
            }
#endif
        }
    
    }
   
{Body}
}

